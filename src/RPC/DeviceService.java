/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package RPC;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.0)", date = "2023-04-18")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class DeviceService {

  /**
   * Ahh, now onto the cool part, defining a service. Services just need a name
   * and can optionally inherit from another service using the extends keyword.
   */
  public interface Iface {

    /**
     * A method definition looks like C code. It has a return type, arguments,
     * and optionally a list of exceptions that it may throw. Note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     * 
     * @param bucketIds
     * @param deviceHashCode
     */
    public java.util.Map<java.util.List<Double>,java.util.List<Vector>> sendData(java.util.Set<java.util.List<Double>> bucketIds, int deviceHashCode) throws InvalidException, org.apache.thrift.TException;

    public void getExternalData(java.util.Map<java.util.List<Double>, Integer> status, java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result) throws InvalidException, org.apache.thrift.TException;

    public java.util.List<Vector> sendAllLocalData() throws InvalidException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendData(java.util.Set<java.util.List<Double>> bucketIds, int deviceHashCode, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<Double>,java.util.List<Vector>>> resultHandler) throws org.apache.thrift.TException;

    public void getExternalData(java.util.Map<java.util.List<Double>, Integer> status, java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendAllLocalData(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vector>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.Map<java.util.List<Double>,java.util.List<Vector>> sendData(java.util.Set<java.util.List<Double>> bucketIds, int deviceHashCode) throws InvalidException, org.apache.thrift.TException
    {
      send_sendData(bucketIds, deviceHashCode);
      return recv_sendData();
    }

    public void send_sendData(java.util.Set<java.util.List<Double>> bucketIds, int deviceHashCode) throws org.apache.thrift.TException
    {
      sendData_args args = new sendData_args();
      args.setBucketIds(bucketIds);
      args.setDeviceHashCode(deviceHashCode);
      sendBase("sendData", args);
    }

    public java.util.Map<java.util.List<Double>,java.util.List<Vector>> recv_sendData() throws InvalidException, org.apache.thrift.TException
    {
      sendData_result result = new sendData_result();
      receiveBase(result, "sendData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalid != null) {
        throw result.invalid;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendData failed: unknown result");
    }

    @Override
    public void getExternalData(java.util.Map<java.util.List<Double>, Integer> status, java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result) throws InvalidException, org.apache.thrift.TException
    {
      send_getExternalData(status, result);
      recv_getExternalData();
    }

    public void send_getExternalData(java.util.Map<java.util.List<Double>, Integer> status, java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result) throws org.apache.thrift.TException
    {
      getExternalData_args args = new getExternalData_args();
      args.setStatus(status);
      args.setResult(result);
      sendBase("getExternalData", args);
    }

    public void recv_getExternalData() throws InvalidException, org.apache.thrift.TException
    {
      getExternalData_result result = new getExternalData_result();
      receiveBase(result, "getExternalData");
      if (result.invalid != null) {
        throw result.invalid;
      }
      return;
    }

    @Override
    public java.util.List<Vector> sendAllLocalData() throws InvalidException, org.apache.thrift.TException
    {
      send_sendAllLocalData();
      return recv_sendAllLocalData();
    }

    public void send_sendAllLocalData() throws org.apache.thrift.TException
    {
      sendAllLocalData_args args = new sendAllLocalData_args();
      sendBase("sendAllLocalData", args);
    }

    public java.util.List<Vector> recv_sendAllLocalData() throws InvalidException, org.apache.thrift.TException
    {
      sendAllLocalData_result result = new sendAllLocalData_result();
      receiveBase(result, "sendAllLocalData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalid != null) {
        throw result.invalid;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendAllLocalData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void sendData(java.util.Set<java.util.List<Double>> bucketIds, int deviceHashCode, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<Double>,java.util.List<Vector>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendData_call method_call = new sendData_call(bucketIds, deviceHashCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.util.List<Double>,java.util.List<Vector>>> {
      private java.util.Set<java.util.List<Double>> bucketIds;
      private int deviceHashCode;
      public sendData_call(java.util.Set<java.util.List<Double>> bucketIds, int deviceHashCode, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<Double>,java.util.List<Vector>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketIds = bucketIds;
        this.deviceHashCode = deviceHashCode;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendData_args args = new sendData_args();
        args.setBucketIds(bucketIds);
        args.setDeviceHashCode(deviceHashCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.util.List<Double>,java.util.List<Vector>> getResult() throws InvalidException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendData();
      }
    }

    @Override
    public void getExternalData(java.util.Map<java.util.List<Double>, Integer> status, java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExternalData_call method_call = new getExternalData_call(status, result, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExternalData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<java.util.List<Double>, Integer> status;
      private java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result;
      public getExternalData_call(java.util.Map<java.util.List<Double>, Integer> status, java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
        this.result = result;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExternalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExternalData_args args = new getExternalData_args();
        args.setStatus(status);
        args.setResult(result);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws InvalidException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_getExternalData();
        return null;
      }
    }

    @Override
    public void sendAllLocalData(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vector>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendAllLocalData_call method_call = new sendAllLocalData_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendAllLocalData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Vector>> {
      public sendAllLocalData_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vector>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendAllLocalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendAllLocalData_args args = new sendAllLocalData_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<Vector> getResult() throws InvalidException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendAllLocalData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendData", new sendData());
      processMap.put("getExternalData", new getExternalData());
      processMap.put("sendAllLocalData", new sendAllLocalData());
      return processMap;
    }

    public static class sendData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendData_args> {
      public sendData() {
        super("sendData");
      }

      @Override
      public sendData_args getEmptyArgsInstance() {
        return new sendData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public sendData_result getResult(I iface, sendData_args args) throws org.apache.thrift.TException {
        sendData_result result = new sendData_result();
        try {
          result.success = iface.sendData(args.bucketIds, args.deviceHashCode);
        } catch (InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

    public static class getExternalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExternalData_args> {
      public getExternalData() {
        super("getExternalData");
      }

      @Override
      public getExternalData_args getEmptyArgsInstance() {
        return new getExternalData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getExternalData_result getResult(I iface, getExternalData_args args) throws org.apache.thrift.TException {
        getExternalData_result result = new getExternalData_result();
        try {
          iface.getExternalData(args.status, args.result);
        } catch (InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

    public static class sendAllLocalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendAllLocalData_args> {
      public sendAllLocalData() {
        super("sendAllLocalData");
      }

      @Override
      public sendAllLocalData_args getEmptyArgsInstance() {
        return new sendAllLocalData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public sendAllLocalData_result getResult(I iface, sendAllLocalData_args args) throws org.apache.thrift.TException {
        sendAllLocalData_result result = new sendAllLocalData_result();
        try {
          result.success = iface.sendAllLocalData();
        } catch (InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendData", new sendData());
      processMap.put("getExternalData", new getExternalData());
      processMap.put("sendAllLocalData", new sendAllLocalData());
      return processMap;
    }

    public static class sendData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendData_args, java.util.Map<java.util.List<Double>,java.util.List<Vector>>> {
      public sendData() {
        super("sendData");
      }

      @Override
      public sendData_args getEmptyArgsInstance() {
        return new sendData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<Double>,java.util.List<Vector>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<Double>,java.util.List<Vector>>>() {
          @Override
          public void onComplete(java.util.Map<java.util.List<Double>,java.util.List<Vector>> o) {
            sendData_result result = new sendData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendData_result result = new sendData_result();
            if (e instanceof InvalidException) {
              result.invalid = (InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, sendData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<Double>,java.util.List<Vector>>> resultHandler) throws org.apache.thrift.TException {
        iface.sendData(args.bucketIds, args.deviceHashCode,resultHandler);
      }
    }

    public static class getExternalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExternalData_args, Void> {
      public getExternalData() {
        super("getExternalData");
      }

      @Override
      public getExternalData_args getEmptyArgsInstance() {
        return new getExternalData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            getExternalData_result result = new getExternalData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getExternalData_result result = new getExternalData_result();
            if (e instanceof InvalidException) {
              result.invalid = (InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getExternalData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.getExternalData(args.status, args.result,resultHandler);
      }
    }

    public static class sendAllLocalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendAllLocalData_args, java.util.List<Vector>> {
      public sendAllLocalData() {
        super("sendAllLocalData");
      }

      @Override
      public sendAllLocalData_args getEmptyArgsInstance() {
        return new sendAllLocalData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vector>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vector>>() { 
          @Override
          public void onComplete(java.util.List<Vector> o) {
            sendAllLocalData_result result = new sendAllLocalData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendAllLocalData_result result = new sendAllLocalData_result();
            if (e instanceof InvalidException) {
              result.invalid = (InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, sendAllLocalData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vector>> resultHandler) throws org.apache.thrift.TException {
        iface.sendAllLocalData(resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendData_args implements org.apache.thrift.TBase<sendData_args, sendData_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendData_args");

    private static final org.apache.thrift.protocol.TField BUCKET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketIds", org.apache.thrift.protocol.TType.SET, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_HASH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceHashCode", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<Double>> bucketIds; // required
    public int deviceHashCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_IDS((short)1, "bucketIds"),
      DEVICE_HASH_CODE((short)2, "deviceHashCode");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_IDS
            return BUCKET_IDS;
          case 2: // DEVICE_HASH_CODE
            return DEVICE_HASH_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEHASHCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_IDS, new org.apache.thrift.meta_data.FieldMetaData("bucketIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.DEVICE_HASH_CODE, new org.apache.thrift.meta_data.FieldMetaData("deviceHashCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendData_args.class, metaDataMap);
    }

    public sendData_args() {
    }

    public sendData_args(
      java.util.Set<java.util.List<Double>> bucketIds,
      int deviceHashCode)
    {
      this();
      this.bucketIds = bucketIds;
      this.deviceHashCode = deviceHashCode;
      setDeviceHashCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendData_args(sendData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBucketIds()) {
        java.util.Set<java.util.List<Double>> __this__bucketIds = new java.util.HashSet<java.util.List<Double>>(other.bucketIds.size());
        for (java.util.List<Double> other_element : other.bucketIds) {
          java.util.List<Double> __this__bucketIds_copy = new java.util.ArrayList<Double>(other_element);
          __this__bucketIds.add(__this__bucketIds_copy);
        }
        this.bucketIds = __this__bucketIds;
      }
      this.deviceHashCode = other.deviceHashCode;
    }

    @Override
    public sendData_args deepCopy() {
      return new sendData_args(this);
    }

    @Override
    public void clear() {
      this.bucketIds = null;
      setDeviceHashCodeIsSet(false);
      this.deviceHashCode = 0;
    }

    public int getBucketIdsSize() {
      return (this.bucketIds == null) ? 0 : this.bucketIds.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<Double>> getBucketIdsIterator() {
      return (this.bucketIds == null) ? null : this.bucketIds.iterator();
    }

    public void addToBucketIds(java.util.List<Double> elem) {
      if (this.bucketIds == null) {
        this.bucketIds = new java.util.HashSet<java.util.List<Double>>();
      }
      this.bucketIds.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.util.List<Double>> getBucketIds() {
      return this.bucketIds;
    }

    public sendData_args setBucketIds(@org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<Double>> bucketIds) {
      this.bucketIds = bucketIds;
      return this;
    }

    public void unsetBucketIds() {
      this.bucketIds = null;
    }

    /** Returns true if field bucketIds is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketIds() {
      return this.bucketIds != null;
    }

    public void setBucketIdsIsSet(boolean value) {
      if (!value) {
        this.bucketIds = null;
      }
    }

    public int getDeviceHashCode() {
      return this.deviceHashCode;
    }

    public sendData_args setDeviceHashCode(int deviceHashCode) {
      this.deviceHashCode = deviceHashCode;
      setDeviceHashCodeIsSet(true);
      return this;
    }

    public void unsetDeviceHashCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEVICEHASHCODE_ISSET_ID);
    }

    /** Returns true if field deviceHashCode is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceHashCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEVICEHASHCODE_ISSET_ID);
    }

    public void setDeviceHashCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEVICEHASHCODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case BUCKET_IDS:
        if (value == null) {
          unsetBucketIds();
        } else {
          setBucketIds((java.util.Set<java.util.List<Double>>)value);
        }
        break;

      case DEVICE_HASH_CODE:
        if (value == null) {
          unsetDeviceHashCode();
        } else {
          setDeviceHashCode((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_IDS:
        return getBucketIds();

      case DEVICE_HASH_CODE:
        return getDeviceHashCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_IDS:
        return isSetBucketIds();
      case DEVICE_HASH_CODE:
        return isSetDeviceHashCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof sendData_args)
        return this.equals((sendData_args)that);
      return false;
    }

    public boolean equals(sendData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bucketIds = true && this.isSetBucketIds();
      boolean that_present_bucketIds = true && that.isSetBucketIds();
      if (this_present_bucketIds || that_present_bucketIds) {
        if (!(this_present_bucketIds && that_present_bucketIds))
          return false;
        if (!this.bucketIds.equals(that.bucketIds))
          return false;
      }

      boolean this_present_deviceHashCode = true;
      boolean that_present_deviceHashCode = true;
      if (this_present_deviceHashCode || that_present_deviceHashCode) {
        if (!(this_present_deviceHashCode && that_present_deviceHashCode))
          return false;
        if (this.deviceHashCode != that.deviceHashCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBucketIds()) ? 131071 : 524287);
      if (isSetBucketIds())
        hashCode = hashCode * 8191 + bucketIds.hashCode();

      hashCode = hashCode * 8191 + deviceHashCode;

      return hashCode;
    }

    @Override
    public int compareTo(sendData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetBucketIds(), other.isSetBucketIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketIds, other.bucketIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDeviceHashCode(), other.isSetDeviceHashCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceHashCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceHashCode, other.deviceHashCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendData_args(");
      boolean first = true;

      sb.append("bucketIds:");
      if (this.bucketIds == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceHashCode:");
      sb.append(this.deviceHashCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_argsStandardScheme getScheme() {
        return new sendData_argsStandardScheme();
      }
    }

    private static class sendData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                  struct.bucketIds = new java.util.HashSet<java.util.List<Double>>(2*_set34.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<Double> _elem35;
                  for (int _i36 = 0; _i36 < _set34.size; ++_i36)
                  {
                    {
                      org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                      _elem35 = new java.util.ArrayList<Double>(_list37.size);
                      double _elem38;
                      for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                      {
                        _elem38 = iprot.readDouble();
                        _elem35.add(_elem38);
                      }
                      iprot.readListEnd();
                    }
                    struct.bucketIds.add(_elem35);
                  }
                  iprot.readSetEnd();
                }
                struct.setBucketIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_HASH_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deviceHashCode = iprot.readI32();
                struct.setDeviceHashCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketIds != null) {
          oprot.writeFieldBegin(BUCKET_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, struct.bucketIds.size()));
            for (java.util.List<Double> _iter40 : struct.bucketIds)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter40.size()));
                for (double _iter41 : _iter40)
                {
                  oprot.writeDouble(_iter41);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEVICE_HASH_CODE_FIELD_DESC);
        oprot.writeI32(struct.deviceHashCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_argsTupleScheme getScheme() {
        return new sendData_argsTupleScheme();
      }
    }

    private static class sendData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBucketIds()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceHashCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBucketIds()) {
          {
            oprot.writeI32(struct.bucketIds.size());
            for (java.util.List<Double> _iter42 : struct.bucketIds)
            {
              {
                oprot.writeI32(_iter42.size());
                for (double _iter43 : _iter42)
                {
                  oprot.writeDouble(_iter43);
                }
              }
            }
          }
        }
        if (struct.isSetDeviceHashCode()) {
          oprot.writeI32(struct.deviceHashCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set44 = iprot.readSetBegin();
            struct.bucketIds = new java.util.HashSet<java.util.List<Double>>(2*_set44.size);
            @org.apache.thrift.annotation.Nullable java.util.List<Double> _elem45;
            for (int _i46 = 0; _i46 < _set44.size; ++_i46)
            {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                _elem45 = new java.util.ArrayList<Double>(_list47.size);
                double _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = iprot.readDouble();
                  _elem45.add(_elem48);
                }
              }
              struct.bucketIds.add(_elem45);
            }
          }
          struct.setBucketIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceHashCode = iprot.readI32();
          struct.setDeviceHashCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendData_result implements org.apache.thrift.TBase<sendData_result, sendData_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<Double>,java.util.List<Vector>> success; // required
    public @org.apache.thrift.annotation.Nullable InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID((short)1, "invalid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector.class)))));
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendData_result.class, metaDataMap);
    }

    public sendData_result() {
    }

    public sendData_result(
      java.util.Map<java.util.List<Double>,java.util.List<Vector>> success,
      InvalidException invalid)
    {
      this();
      this.success = success;
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendData_result(sendData_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.util.List<Double>,java.util.List<Vector>> __this__success = new java.util.HashMap<java.util.List<Double>,java.util.List<Vector>>(other.success.size());
        for (java.util.Map.Entry<java.util.List<Double>, java.util.List<Vector>> other_element : other.success.entrySet()) {

          java.util.List<Double> other_element_key = other_element.getKey();
          java.util.List<Vector> other_element_value = other_element.getValue();

          java.util.List<Double> __this__success_copy_key = new java.util.ArrayList<Double>(other_element_key);

          java.util.List<Vector> __this__success_copy_value = new java.util.ArrayList<Vector>(other_element_value.size());
          for (Vector other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new Vector(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetInvalid()) {
        this.invalid = new InvalidException(other.invalid);
      }
    }

    @Override
    public sendData_result deepCopy() {
      return new sendData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.invalid = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.util.List<Double> key, java.util.List<Vector> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.util.List<Double>,java.util.List<Vector>>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<Double>,java.util.List<Vector>> getSuccess() {
      return this.success;
    }

    public sendData_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<Double>,java.util.List<Vector>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidException getInvalid() {
      return this.invalid;
    }

    public sendData_result setInvalid(@org.apache.thrift.annotation.Nullable InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.util.List<Double>,java.util.List<Vector>>)value);
        }
        break;

      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INVALID:
        return getInvalid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID:
        return isSetInvalid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof sendData_result)
        return this.equals((sendData_result)that);
      return false;
    }

    public boolean equals(sendData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_resultStandardScheme getScheme() {
        return new sendData_resultStandardScheme();
      }
    }

    private static class sendData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.util.List<Double>,java.util.List<Vector>>(2*_map50.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<Double> _key51;
                  @org.apache.thrift.annotation.Nullable java.util.List<Vector> _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    {
                      org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                      _key51 = new java.util.ArrayList<Double>(_list54.size);
                      double _elem55;
                      for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                      {
                        _elem55 = iprot.readDouble();
                        _key51.add(_elem55);
                      }
                      iprot.readListEnd();
                    }
                    {
                      org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                      _val52 = new java.util.ArrayList<Vector>(_list57.size);
                      @org.apache.thrift.annotation.Nullable Vector _elem58;
                      for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                      {
                        _elem58 = new Vector();
                        _elem58.read(iprot);
                        _val52.add(_elem58);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.Map.Entry<java.util.List<Double>, java.util.List<Vector>> _iter60 : struct.success.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter60.getKey().size()));
                for (double _iter61 : _iter60.getKey())
                {
                  oprot.writeDouble(_iter61);
                }
                oprot.writeListEnd();
              }
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter60.getValue().size()));
                for (Vector _iter62 : _iter60.getValue())
                {
                  _iter62.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_resultTupleScheme getScheme() {
        return new sendData_resultTupleScheme();
      }
    }

    private static class sendData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.util.List<Double>, java.util.List<Vector>> _iter63 : struct.success.entrySet())
            {
              {
                oprot.writeI32(_iter63.getKey().size());
                for (double _iter64 : _iter63.getKey())
                {
                  oprot.writeDouble(_iter64);
                }
              }
              {
                oprot.writeI32(_iter63.getValue().size());
                for (Vector _iter65 : _iter63.getValue())
                {
                  _iter65.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
            struct.success = new java.util.HashMap<java.util.List<Double>,java.util.List<Vector>>(2*_map66.size);
            @org.apache.thrift.annotation.Nullable java.util.List<Double> _key67;
            @org.apache.thrift.annotation.Nullable java.util.List<Vector> _val68;
            for (int _i69 = 0; _i69 < _map66.size; ++_i69)
            {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                _key67 = new java.util.ArrayList<Double>(_list70.size);
                double _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = iprot.readDouble();
                  _key67.add(_elem71);
                }
              }
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                _val68 = new java.util.ArrayList<Vector>(_list73.size);
                @org.apache.thrift.annotation.Nullable Vector _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = new Vector();
                  _elem74.read(iprot);
                  _val68.add(_elem74);
                }
              }
              struct.success.put(_key67, _val68);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalid = new InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getExternalData_args implements org.apache.thrift.TBase<getExternalData_args, getExternalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExternalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExternalData_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExternalData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExternalData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<Double>, Integer> status; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status"),
      RESULT((short)2, "result");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          case 2: // RESULT
            return RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExternalData_args.class, metaDataMap);
    }

    public getExternalData_args() {
    }

    public getExternalData_args(
      java.util.Map<java.util.List<Double>, Integer> status,
      java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result)
    {
      this();
      this.status = status;
      this.result = result;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExternalData_args(getExternalData_args other) {
      if (other.isSetStatus()) {
        java.util.Map<java.util.List<Double>, Integer> __this__status = new java.util.HashMap<java.util.List<Double>, Integer>(other.status.size());
        for (java.util.Map.Entry<java.util.List<Double>, Integer> other_element : other.status.entrySet()) {

          java.util.List<Double> other_element_key = other_element.getKey();
          Integer other_element_value = other_element.getValue();

          java.util.List<Double> __this__status_copy_key = new java.util.ArrayList<Double>(other_element_key);

          Integer __this__status_copy_value = other_element_value;

          __this__status.put(__this__status_copy_key, __this__status_copy_value);
        }
        this.status = __this__status;
      }
      if (other.isSetResult()) {
        java.util.Map<Integer,java.util.Set<java.util.List<Double>>> __this__result = new java.util.HashMap<Integer,java.util.Set<java.util.List<Double>>>(other.result.size());
        for (java.util.Map.Entry<Integer, java.util.Set<java.util.List<Double>>> other_element : other.result.entrySet()) {

          Integer other_element_key = other_element.getKey();
          java.util.Set<java.util.List<Double>> other_element_value = other_element.getValue();

          Integer __this__result_copy_key = other_element_key;

          java.util.Set<java.util.List<Double>> __this__result_copy_value = new java.util.HashSet<java.util.List<Double>>(other_element_value.size());
          for (java.util.List<Double> other_element_value_element : other_element_value) {
            java.util.List<Double> __this__result_copy_value_copy = new java.util.ArrayList<Double>(other_element_value_element);
            __this__result_copy_value.add(__this__result_copy_value_copy);
          }

          __this__result.put(__this__result_copy_key, __this__result_copy_value);
        }
        this.result = __this__result;
      }
    }

    @Override
    public getExternalData_args deepCopy() {
      return new getExternalData_args(this);
    }

    @Override
    public void clear() {
      this.status = null;
      this.result = null;
    }

    public int getStatusSize() {
      return (this.status == null) ? 0 : this.status.size();
    }

    public void putToStatus(java.util.List<Double> key, int val) {
      if (this.status == null) {
        this.status = new java.util.HashMap<java.util.List<Double>, Integer>();
      }
      this.status.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<Double>, Integer> getStatus() {
      return this.status;
    }

    public getExternalData_args setStatus(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<Double>, Integer> status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public int getResultSize() {
      return (this.result == null) ? 0 : this.result.size();
    }

    public void putToResult(int key, java.util.Set<java.util.List<Double>> val) {
      if (this.result == null) {
        this.result = new java.util.HashMap<Integer,java.util.Set<java.util.List<Double>>>();
      }
      this.result.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<Integer,java.util.Set<java.util.List<Double>>> getResult() {
      return this.result;
    }

    public getExternalData_args setResult(@org.apache.thrift.annotation.Nullable java.util.Map<Integer,java.util.Set<java.util.List<Double>>> result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((java.util.Map<java.util.List<Double>, Integer>)value);
        }
        break;

      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((java.util.Map<Integer,java.util.Set<java.util.List<Double>>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return getStatus();

      case RESULT:
        return getResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      case RESULT:
        return isSetResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getExternalData_args)
        return this.equals((getExternalData_args)that);
      return false;
    }

    public boolean equals(getExternalData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
      if (isSetStatus())
        hashCode = hashCode * 8191 + status.hashCode();

      hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
      if (isSetResult())
        hashCode = hashCode * 8191 + result.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExternalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetStatus(), other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetResult(), other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExternalData_args(");
      boolean first = true;

      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExternalData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_argsStandardScheme getScheme() {
        return new getExternalData_argsStandardScheme();
      }
    }

    private static class getExternalData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExternalData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getExternalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                  struct.status = new java.util.HashMap<java.util.List<Double>, Integer>(2*_map76.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<Double> _key77;
                  int _val78;
                  for (int _i79 = 0; _i79 < _map76.size; ++_i79)
                  {
                    {
                      org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                      _key77 = new java.util.ArrayList<Double>(_list80.size);
                      double _elem81;
                      for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                      {
                        _elem81 = iprot.readDouble();
                        _key77.add(_elem81);
                      }
                      iprot.readListEnd();
                    }
                    _val78 = iprot.readI32();
                    struct.status.put(_key77, _val78);
                  }
                  iprot.readMapEnd();
                }
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map83 = iprot.readMapBegin();
                  struct.result = new java.util.HashMap<Integer,java.util.Set<java.util.List<Double>>>(2*_map83.size);
                  int _key84;
                  @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<Double>> _val85;
                  for (int _i86 = 0; _i86 < _map83.size; ++_i86)
                  {
                    _key84 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TSet _set87 = iprot.readSetBegin();
                      _val85 = new java.util.HashSet<java.util.List<Double>>(2*_set87.size);
                      @org.apache.thrift.annotation.Nullable java.util.List<Double> _elem88;
                      for (int _i89 = 0; _i89 < _set87.size; ++_i89)
                      {
                        {
                          org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                          _elem88 = new java.util.ArrayList<Double>(_list90.size);
                          double _elem91;
                          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                          {
                            _elem91 = iprot.readDouble();
                            _elem88.add(_elem91);
                          }
                          iprot.readListEnd();
                        }
                        _val85.add(_elem88);
                      }
                      iprot.readSetEnd();
                    }
                    struct.result.put(_key84, _val85);
                  }
                  iprot.readMapEnd();
                }
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getExternalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I32, struct.status.size()));
            for (java.util.Map.Entry<java.util.List<Double>, Integer> _iter93 : struct.status.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter93.getKey().size()));
                for (double _iter94 : _iter93.getKey())
                {
                  oprot.writeDouble(_iter94);
                }
                oprot.writeListEnd();
              }
              oprot.writeI32(_iter93.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.result.size()));
            for (java.util.Map.Entry<Integer, java.util.Set<java.util.List<Double>>> _iter95 : struct.result.entrySet())
            {
              oprot.writeI32(_iter95.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, _iter95.getValue().size()));
                for (java.util.List<Double> _iter96 : _iter95.getValue())
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter96.size()));
                    for (double _iter97 : _iter96)
                    {
                      oprot.writeDouble(_iter97);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExternalData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_argsTupleScheme getScheme() {
        return new getExternalData_argsTupleScheme();
      }
    }

    private static class getExternalData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExternalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExternalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        if (struct.isSetResult()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStatus()) {
          {
            oprot.writeI32(struct.status.size());
            for (java.util.Map.Entry<java.util.List<Double>, Integer> _iter98 : struct.status.entrySet())
            {
              {
                oprot.writeI32(_iter98.getKey().size());
                for (double _iter99 : _iter98.getKey())
                {
                  oprot.writeDouble(_iter99);
                }
              }
              oprot.writeI32(_iter98.getValue());
            }
          }
        }
        if (struct.isSetResult()) {
          {
            oprot.writeI32(struct.result.size());
            for (java.util.Map.Entry<Integer, java.util.Set<java.util.List<Double>>> _iter100 : struct.result.entrySet())
            {
              oprot.writeI32(_iter100.getKey());
              {
                oprot.writeI32(_iter100.getValue().size());
                for (java.util.List<Double> _iter101 : _iter100.getValue())
                {
                  {
                    oprot.writeI32(_iter101.size());
                    for (double _iter102 : _iter101)
                    {
                      oprot.writeDouble(_iter102);
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExternalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map103 = iprot.readMapBegin();
            struct.status = new java.util.HashMap<java.util.List<Double>, Integer>(2*_map103.size);
            @org.apache.thrift.annotation.Nullable java.util.List<Double> _key104;
            int _val105;
            for (int _i106 = 0; _i106 < _map103.size; ++_i106)
            {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                _key104 = new java.util.ArrayList<Double>(_list107.size);
                double _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = iprot.readDouble();
                  _key104.add(_elem108);
                }
              }
              _val105 = iprot.readI32();
              struct.status.put(_key104, _val105);
            }
          }
          struct.setStatusIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map110 = iprot.readMapBegin();
            struct.result = new java.util.HashMap<Integer,java.util.Set<java.util.List<Double>>>(2*_map110.size);
            int _key111;
            @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<Double>> _val112;
            for (int _i113 = 0; _i113 < _map110.size; ++_i113)
            {
              _key111 = iprot.readI32();
              {
                org.apache.thrift.protocol.TSet _set114 = iprot.readSetBegin();
                _val112 = new java.util.HashSet<java.util.List<Double>>(2*_set114.size);
                @org.apache.thrift.annotation.Nullable java.util.List<Double> _elem115;
                for (int _i116 = 0; _i116 < _set114.size; ++_i116)
                {
                  {
                    org.apache.thrift.protocol.TList _list117 = iprot.readListBegin();
                    _elem115 = new java.util.ArrayList<Double>(_list117.size);
                    double _elem118;
                    for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                    {
                      _elem118 = iprot.readDouble();
                      _elem115.add(_elem118);
                    }
                  }
                  _val112.add(_elem115);
                }
              }
              struct.result.put(_key111, _val112);
            }
          }
          struct.setResultIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getExternalData_result implements org.apache.thrift.TBase<getExternalData_result, getExternalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExternalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExternalData_result");

    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExternalData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExternalData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVALID((short)1, "invalid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExternalData_result.class, metaDataMap);
    }

    public getExternalData_result() {
    }

    public getExternalData_result(
      InvalidException invalid)
    {
      this();
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExternalData_result(getExternalData_result other) {
      if (other.isSetInvalid()) {
        this.invalid = new InvalidException(other.invalid);
      }
    }

    @Override
    public getExternalData_result deepCopy() {
      return new getExternalData_result(this);
    }

    @Override
    public void clear() {
      this.invalid = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidException getInvalid() {
      return this.invalid;
    }

    public getExternalData_result setInvalid(@org.apache.thrift.annotation.Nullable InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVALID:
        return getInvalid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVALID:
        return isSetInvalid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getExternalData_result)
        return this.equals((getExternalData_result)that);
      return false;
    }

    public boolean equals(getExternalData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExternalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExternalData_result(");
      boolean first = true;

      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExternalData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_resultStandardScheme getScheme() {
        return new getExternalData_resultStandardScheme();
      }
    }

    private static class getExternalData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExternalData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getExternalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getExternalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExternalData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_resultTupleScheme getScheme() {
        return new getExternalData_resultTupleScheme();
      }
    }

    private static class getExternalData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExternalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExternalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInvalid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExternalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invalid = new InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendAllLocalData_args implements org.apache.thrift.TBase<sendAllLocalData_args, sendAllLocalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendAllLocalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAllLocalData_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendAllLocalData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendAllLocalData_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAllLocalData_args.class, metaDataMap);
    }

    public sendAllLocalData_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAllLocalData_args(sendAllLocalData_args other) {
    }

    @Override
    public sendAllLocalData_args deepCopy() {
      return new sendAllLocalData_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof sendAllLocalData_args)
        return this.equals((sendAllLocalData_args)that);
      return false;
    }

    public boolean equals(sendAllLocalData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(sendAllLocalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAllLocalData_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAllLocalData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendAllLocalData_argsStandardScheme getScheme() {
        return new sendAllLocalData_argsStandardScheme();
      }
    }

    private static class sendAllLocalData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendAllLocalData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAllLocalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAllLocalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAllLocalData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendAllLocalData_argsTupleScheme getScheme() {
        return new sendAllLocalData_argsTupleScheme();
      }
    }

    private static class sendAllLocalData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendAllLocalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAllLocalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAllLocalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendAllLocalData_result implements org.apache.thrift.TBase<sendAllLocalData_result, sendAllLocalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendAllLocalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAllLocalData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendAllLocalData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendAllLocalData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Vector> success; // required
    public @org.apache.thrift.annotation.Nullable InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID((short)1, "invalid");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector.class))));
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAllLocalData_result.class, metaDataMap);
    }

    public sendAllLocalData_result() {
    }

    public sendAllLocalData_result(
      java.util.List<Vector> success,
      InvalidException invalid)
    {
      this();
      this.success = success;
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAllLocalData_result(sendAllLocalData_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Vector> __this__success = new java.util.ArrayList<Vector>(other.success.size());
        for (Vector other_element : other.success) {
          __this__success.add(new Vector(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInvalid()) {
        this.invalid = new InvalidException(other.invalid);
      }
    }

    @Override
    public sendAllLocalData_result deepCopy() {
      return new sendAllLocalData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.invalid = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Vector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vector elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Vector>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Vector> getSuccess() {
      return this.success;
    }

    public sendAllLocalData_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Vector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidException getInvalid() {
      return this.invalid;
    }

    public sendAllLocalData_result setInvalid(@org.apache.thrift.annotation.Nullable InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Vector>)value);
        }
        break;

      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INVALID:
        return getInvalid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID:
        return isSetInvalid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof sendAllLocalData_result)
        return this.equals((sendAllLocalData_result)that);
      return false;
    }

    public boolean equals(sendAllLocalData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendAllLocalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAllLocalData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAllLocalData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendAllLocalData_resultStandardScheme getScheme() {
        return new sendAllLocalData_resultStandardScheme();
      }
    }

    private static class sendAllLocalData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendAllLocalData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAllLocalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Vector>(_list120.size);
                  @org.apache.thrift.annotation.Nullable Vector _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new Vector();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAllLocalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vector _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAllLocalData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendAllLocalData_resultTupleScheme getScheme() {
        return new sendAllLocalData_resultTupleScheme();
      }
    }

    private static class sendAllLocalData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendAllLocalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAllLocalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vector _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAllLocalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = iprot.readListBegin();
            struct.success = new java.util.ArrayList<Vector>(_list125.size);
            @org.apache.thrift.annotation.Nullable Vector _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new Vector();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalid = new InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
