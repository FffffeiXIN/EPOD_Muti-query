/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package RPC;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-05-03")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class EdgeNodeService {

  public interface Iface {

    /**
     * A method definition looks like C code. It has a return type, arguments,
     * and optionally a list of exceptions that it may throw. Note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     * 
     * @param fingerprints
     * @param edgeDeviceHashCode
     */
    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode) throws RPC.InvalidException, org.apache.thrift.TException;

    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash) throws RPC.InvalidException, org.apache.thrift.TException;

    public java.util.Set<RPC.Vector> uploadAndDetectOutlier(java.util.List<RPC.Vector> data) throws RPC.InvalidException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> resultHandler) throws org.apache.thrift.TException;

    public void uploadAndDetectOutlier(java.util.List<RPC.Vector> data, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<RPC.Vector>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode) throws RPC.InvalidException, org.apache.thrift.TException
    {
      send_receiveAndProcessFP(fingerprints, edgeDeviceHashCode);
      recv_receiveAndProcessFP();
    }

    public void send_receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode) throws org.apache.thrift.TException
    {
      receiveAndProcessFP_args args = new receiveAndProcessFP_args();
      args.setFingerprints(fingerprints);
      args.setEdgeDeviceHashCode(edgeDeviceHashCode);
      sendBase("receiveAndProcessFP", args);
    }

    public void recv_receiveAndProcessFP() throws RPC.InvalidException, org.apache.thrift.TException
    {
      receiveAndProcessFP_result result = new receiveAndProcessFP_result();
      receiveBase(result, "receiveAndProcessFP");
      if (result.invalid != null) {
        throw result.invalid;
      }
      return;
    }

    @Override
    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash) throws RPC.InvalidException, org.apache.thrift.TException
    {
      send_provideNeighborsResult(unSateUnits, edgeNodeHash);
      return recv_provideNeighborsResult();
    }

    public void send_provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash) throws org.apache.thrift.TException
    {
      provideNeighborsResult_args args = new provideNeighborsResult_args();
      args.setUnSateUnits(unSateUnits);
      args.setEdgeNodeHash(edgeNodeHash);
      sendBase("provideNeighborsResult", args);
    }

    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> recv_provideNeighborsResult() throws RPC.InvalidException, org.apache.thrift.TException
    {
      provideNeighborsResult_result result = new provideNeighborsResult_result();
      receiveBase(result, "provideNeighborsResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalid != null) {
        throw result.invalid;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "provideNeighborsResult failed: unknown result");
    }

    @Override
    public java.util.Set<RPC.Vector> uploadAndDetectOutlier(java.util.List<RPC.Vector> data) throws RPC.InvalidException, org.apache.thrift.TException
    {
      send_uploadAndDetectOutlier(data);
      return recv_uploadAndDetectOutlier();
    }

    public void send_uploadAndDetectOutlier(java.util.List<RPC.Vector> data) throws org.apache.thrift.TException
    {
      uploadAndDetectOutlier_args args = new uploadAndDetectOutlier_args();
      args.setData(data);
      sendBase("uploadAndDetectOutlier", args);
    }

    public java.util.Set<RPC.Vector> recv_uploadAndDetectOutlier() throws RPC.InvalidException, org.apache.thrift.TException
    {
      uploadAndDetectOutlier_result result = new uploadAndDetectOutlier_result();
      receiveBase(result, "uploadAndDetectOutlier");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalid != null) {
        throw result.invalid;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadAndDetectOutlier failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveAndProcessFP_call method_call = new receiveAndProcessFP_call(fingerprints, edgeDeviceHashCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveAndProcessFP_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints;
      private int edgeDeviceHashCode;
      public receiveAndProcessFP_call(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fingerprints = fingerprints;
        this.edgeDeviceHashCode = edgeDeviceHashCode;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveAndProcessFP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveAndProcessFP_args args = new receiveAndProcessFP_args();
        args.setFingerprints(fingerprints);
        args.setEdgeDeviceHashCode(edgeDeviceHashCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws RPC.InvalidException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_receiveAndProcessFP();
        return null;
      }
    }

    @Override
    public void provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      provideNeighborsResult_call method_call = new provideNeighborsResult_call(unSateUnits, edgeNodeHash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class provideNeighborsResult_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> {
      private java.util.List<java.util.List<java.lang.Double>> unSateUnits;
      private int edgeNodeHash;
      public provideNeighborsResult_call(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unSateUnits = unSateUnits;
        this.edgeNodeHash = edgeNodeHash;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("provideNeighborsResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        provideNeighborsResult_args args = new provideNeighborsResult_args();
        args.setUnSateUnits(unSateUnits);
        args.setEdgeNodeHash(edgeNodeHash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> getResult() throws RPC.InvalidException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_provideNeighborsResult();
      }
    }

    @Override
    public void uploadAndDetectOutlier(java.util.List<RPC.Vector> data, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<RPC.Vector>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadAndDetectOutlier_call method_call = new uploadAndDetectOutlier_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadAndDetectOutlier_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Set<RPC.Vector>> {
      private java.util.List<RPC.Vector> data;
      public uploadAndDetectOutlier_call(java.util.List<RPC.Vector> data, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<RPC.Vector>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadAndDetectOutlier", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadAndDetectOutlier_args args = new uploadAndDetectOutlier_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Set<RPC.Vector> getResult() throws RPC.InvalidException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadAndDetectOutlier();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("receiveAndProcessFP", new receiveAndProcessFP());
      processMap.put("provideNeighborsResult", new provideNeighborsResult());
      processMap.put("uploadAndDetectOutlier", new uploadAndDetectOutlier());
      return processMap;
    }

    public static class receiveAndProcessFP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveAndProcessFP_args> {
      public receiveAndProcessFP() {
        super("receiveAndProcessFP");
      }

      @Override
      public receiveAndProcessFP_args getEmptyArgsInstance() {
        return new receiveAndProcessFP_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public receiveAndProcessFP_result getResult(I iface, receiveAndProcessFP_args args) throws org.apache.thrift.TException {
        receiveAndProcessFP_result result = new receiveAndProcessFP_result();
        try {
          iface.receiveAndProcessFP(args.fingerprints, args.edgeDeviceHashCode);
        } catch (RPC.InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

    public static class provideNeighborsResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, provideNeighborsResult_args> {
      public provideNeighborsResult() {
        super("provideNeighborsResult");
      }

      @Override
      public provideNeighborsResult_args getEmptyArgsInstance() {
        return new provideNeighborsResult_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public provideNeighborsResult_result getResult(I iface, provideNeighborsResult_args args) throws org.apache.thrift.TException {
        provideNeighborsResult_result result = new provideNeighborsResult_result();
        try {
          result.success = iface.provideNeighborsResult(args.unSateUnits, args.edgeNodeHash);
        } catch (RPC.InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

    public static class uploadAndDetectOutlier<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadAndDetectOutlier_args> {
      public uploadAndDetectOutlier() {
        super("uploadAndDetectOutlier");
      }

      @Override
      public uploadAndDetectOutlier_args getEmptyArgsInstance() {
        return new uploadAndDetectOutlier_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public uploadAndDetectOutlier_result getResult(I iface, uploadAndDetectOutlier_args args) throws org.apache.thrift.TException {
        uploadAndDetectOutlier_result result = new uploadAndDetectOutlier_result();
        try {
          result.success = iface.uploadAndDetectOutlier(args.data);
        } catch (RPC.InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("receiveAndProcessFP", new receiveAndProcessFP());
      processMap.put("provideNeighborsResult", new provideNeighborsResult());
      processMap.put("uploadAndDetectOutlier", new uploadAndDetectOutlier());
      return processMap;
    }

    public static class receiveAndProcessFP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveAndProcessFP_args, Void> {
      public receiveAndProcessFP() {
        super("receiveAndProcessFP");
      }

      @Override
      public receiveAndProcessFP_args getEmptyArgsInstance() {
        return new receiveAndProcessFP_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            receiveAndProcessFP_result result = new receiveAndProcessFP_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            receiveAndProcessFP_result result = new receiveAndProcessFP_result();
            if (e instanceof RPC.InvalidException) {
              result.invalid = (RPC.InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, receiveAndProcessFP_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.receiveAndProcessFP(args.fingerprints, args.edgeDeviceHashCode,resultHandler);
      }
    }

    public static class provideNeighborsResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, provideNeighborsResult_args, java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> {
      public provideNeighborsResult() {
        super("provideNeighborsResult");
      }

      @Override
      public provideNeighborsResult_args getEmptyArgsInstance() {
        return new provideNeighborsResult_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>>() { 
          @Override
          public void onComplete(java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> o) {
            provideNeighborsResult_result result = new provideNeighborsResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            provideNeighborsResult_result result = new provideNeighborsResult_result();
            if (e instanceof RPC.InvalidException) {
              result.invalid = (RPC.InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, provideNeighborsResult_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>> resultHandler) throws org.apache.thrift.TException {
        iface.provideNeighborsResult(args.unSateUnits, args.edgeNodeHash,resultHandler);
      }
    }

    public static class uploadAndDetectOutlier<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadAndDetectOutlier_args, java.util.Set<RPC.Vector>> {
      public uploadAndDetectOutlier() {
        super("uploadAndDetectOutlier");
      }

      @Override
      public uploadAndDetectOutlier_args getEmptyArgsInstance() {
        return new uploadAndDetectOutlier_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Set<RPC.Vector>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Set<RPC.Vector>>() { 
          @Override
          public void onComplete(java.util.Set<RPC.Vector> o) {
            uploadAndDetectOutlier_result result = new uploadAndDetectOutlier_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadAndDetectOutlier_result result = new uploadAndDetectOutlier_result();
            if (e instanceof RPC.InvalidException) {
              result.invalid = (RPC.InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, uploadAndDetectOutlier_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Set<RPC.Vector>> resultHandler) throws org.apache.thrift.TException {
        iface.uploadAndDetectOutlier(args.data,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class receiveAndProcessFP_args implements org.apache.thrift.TBase<receiveAndProcessFP_args, receiveAndProcessFP_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveAndProcessFP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveAndProcessFP_args");

    private static final org.apache.thrift.protocol.TField FINGERPRINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fingerprints", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE_DEVICE_HASH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeDeviceHashCode", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new receiveAndProcessFP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new receiveAndProcessFP_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints; // required
    public int edgeDeviceHashCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINGERPRINTS((short)1, "fingerprints"),
      EDGE_DEVICE_HASH_CODE((short)2, "edgeDeviceHashCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINGERPRINTS
            return FINGERPRINTS;
          case 2: // EDGE_DEVICE_HASH_CODE
            return EDGE_DEVICE_HASH_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGEDEVICEHASHCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINGERPRINTS, new org.apache.thrift.meta_data.FieldMetaData("fingerprints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.EDGE_DEVICE_HASH_CODE, new org.apache.thrift.meta_data.FieldMetaData("edgeDeviceHashCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveAndProcessFP_args.class, metaDataMap);
    }

    public receiveAndProcessFP_args() {
    }

    public receiveAndProcessFP_args(
      java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints,
      int edgeDeviceHashCode)
    {
      this();
      this.fingerprints = fingerprints;
      this.edgeDeviceHashCode = edgeDeviceHashCode;
      setEdgeDeviceHashCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveAndProcessFP_args(receiveAndProcessFP_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFingerprints()) {
        java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> __this__fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(other.fingerprints.size());
        for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> other_element : other.fingerprints.entrySet()) {

          java.util.List<java.lang.Double> other_element_key = other_element.getKey();
          java.lang.Integer other_element_value = other_element.getValue();

          java.util.List<java.lang.Double> __this__fingerprints_copy_key = new java.util.ArrayList<java.lang.Double>(other_element_key);

          java.lang.Integer __this__fingerprints_copy_value = other_element_value;

          __this__fingerprints.put(__this__fingerprints_copy_key, __this__fingerprints_copy_value);
        }
        this.fingerprints = __this__fingerprints;
      }
      this.edgeDeviceHashCode = other.edgeDeviceHashCode;
    }

    @Override
    public receiveAndProcessFP_args deepCopy() {
      return new receiveAndProcessFP_args(this);
    }

    @Override
    public void clear() {
      this.fingerprints = null;
      setEdgeDeviceHashCodeIsSet(false);
      this.edgeDeviceHashCode = 0;
    }

    public int getFingerprintsSize() {
      return (this.fingerprints == null) ? 0 : this.fingerprints.size();
    }

    public void putToFingerprints(java.util.List<java.lang.Double> key, int val) {
      if (this.fingerprints == null) {
        this.fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>();
      }
      this.fingerprints.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> getFingerprints() {
      return this.fingerprints;
    }

    public receiveAndProcessFP_args setFingerprints(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints) {
      this.fingerprints = fingerprints;
      return this;
    }

    public void unsetFingerprints() {
      this.fingerprints = null;
    }

    /** Returns true if field fingerprints is set (has been assigned a value) and false otherwise */
    public boolean isSetFingerprints() {
      return this.fingerprints != null;
    }

    public void setFingerprintsIsSet(boolean value) {
      if (!value) {
        this.fingerprints = null;
      }
    }

    public int getEdgeDeviceHashCode() {
      return this.edgeDeviceHashCode;
    }

    public receiveAndProcessFP_args setEdgeDeviceHashCode(int edgeDeviceHashCode) {
      this.edgeDeviceHashCode = edgeDeviceHashCode;
      setEdgeDeviceHashCodeIsSet(true);
      return this;
    }

    public void unsetEdgeDeviceHashCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGEDEVICEHASHCODE_ISSET_ID);
    }

    /** Returns true if field edgeDeviceHashCode is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeDeviceHashCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGEDEVICEHASHCODE_ISSET_ID);
    }

    public void setEdgeDeviceHashCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EDGEDEVICEHASHCODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FINGERPRINTS:
        if (value == null) {
          unsetFingerprints();
        } else {
          setFingerprints((java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer>)value);
        }
        break;

      case EDGE_DEVICE_HASH_CODE:
        if (value == null) {
          unsetEdgeDeviceHashCode();
        } else {
          setEdgeDeviceHashCode((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FINGERPRINTS:
        return getFingerprints();

      case EDGE_DEVICE_HASH_CODE:
        return getEdgeDeviceHashCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FINGERPRINTS:
        return isSetFingerprints();
      case EDGE_DEVICE_HASH_CODE:
        return isSetEdgeDeviceHashCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof receiveAndProcessFP_args)
        return this.equals((receiveAndProcessFP_args)that);
      return false;
    }

    public boolean equals(receiveAndProcessFP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fingerprints = true && this.isSetFingerprints();
      boolean that_present_fingerprints = true && that.isSetFingerprints();
      if (this_present_fingerprints || that_present_fingerprints) {
        if (!(this_present_fingerprints && that_present_fingerprints))
          return false;
        if (!this.fingerprints.equals(that.fingerprints))
          return false;
      }

      boolean this_present_edgeDeviceHashCode = true;
      boolean that_present_edgeDeviceHashCode = true;
      if (this_present_edgeDeviceHashCode || that_present_edgeDeviceHashCode) {
        if (!(this_present_edgeDeviceHashCode && that_present_edgeDeviceHashCode))
          return false;
        if (this.edgeDeviceHashCode != that.edgeDeviceHashCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFingerprints()) ? 131071 : 524287);
      if (isSetFingerprints())
        hashCode = hashCode * 8191 + fingerprints.hashCode();

      hashCode = hashCode * 8191 + edgeDeviceHashCode;

      return hashCode;
    }

    @Override
    public int compareTo(receiveAndProcessFP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFingerprints(), other.isSetFingerprints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFingerprints()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fingerprints, other.fingerprints);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEdgeDeviceHashCode(), other.isSetEdgeDeviceHashCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeDeviceHashCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeDeviceHashCode, other.edgeDeviceHashCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("receiveAndProcessFP_args(");
      boolean first = true;

      sb.append("fingerprints:");
      if (this.fingerprints == null) {
        sb.append("null");
      } else {
        sb.append(this.fingerprints);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeDeviceHashCode:");
      sb.append(this.edgeDeviceHashCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveAndProcessFP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_argsStandardScheme getScheme() {
        return new receiveAndProcessFP_argsStandardScheme();
      }
    }

    private static class receiveAndProcessFP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<receiveAndProcessFP_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINGERPRINTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key1;
                  int _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    {
                      org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                      _key1 = new java.util.ArrayList<java.lang.Double>(_list4.size);
                      double _elem5;
                      for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                      {
                        _elem5 = iprot.readDouble();
                        _key1.add(_elem5);
                      }
                      iprot.readListEnd();
                    }
                    _val2 = iprot.readI32();
                    struct.fingerprints.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setFingerprintsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE_DEVICE_HASH_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.edgeDeviceHashCode = iprot.readI32();
                struct.setEdgeDeviceHashCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fingerprints != null) {
          oprot.writeFieldBegin(FINGERPRINTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I32, struct.fingerprints.size()));
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> _iter7 : struct.fingerprints.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter7.getKey().size()));
                for (double _iter8 : _iter7.getKey())
                {
                  oprot.writeDouble(_iter8);
                }
                oprot.writeListEnd();
              }
              oprot.writeI32(_iter7.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EDGE_DEVICE_HASH_CODE_FIELD_DESC);
        oprot.writeI32(struct.edgeDeviceHashCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveAndProcessFP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_argsTupleScheme getScheme() {
        return new receiveAndProcessFP_argsTupleScheme();
      }
    }

    private static class receiveAndProcessFP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<receiveAndProcessFP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFingerprints()) {
          optionals.set(0);
        }
        if (struct.isSetEdgeDeviceHashCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFingerprints()) {
          {
            oprot.writeI32(struct.fingerprints.size());
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> _iter9 : struct.fingerprints.entrySet())
            {
              {
                oprot.writeI32(_iter9.getKey().size());
                for (double _iter10 : _iter9.getKey())
                {
                  oprot.writeDouble(_iter10);
                }
              }
              oprot.writeI32(_iter9.getValue());
            }
          }
        }
        if (struct.isSetEdgeDeviceHashCode()) {
          oprot.writeI32(struct.edgeDeviceHashCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I32); 
            struct.fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(2*_map11.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key12;
            int _val13;
            for (int _i14 = 0; _i14 < _map11.size; ++_i14)
            {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _key12 = new java.util.ArrayList<java.lang.Double>(_list15.size);
                double _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readDouble();
                  _key12.add(_elem16);
                }
              }
              _val13 = iprot.readI32();
              struct.fingerprints.put(_key12, _val13);
            }
          }
          struct.setFingerprintsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.edgeDeviceHashCode = iprot.readI32();
          struct.setEdgeDeviceHashCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class receiveAndProcessFP_result implements org.apache.thrift.TBase<receiveAndProcessFP_result, receiveAndProcessFP_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveAndProcessFP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveAndProcessFP_result");

    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new receiveAndProcessFP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new receiveAndProcessFP_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RPC.InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVALID((short)1, "invalid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC.InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveAndProcessFP_result.class, metaDataMap);
    }

    public receiveAndProcessFP_result() {
    }

    public receiveAndProcessFP_result(
      RPC.InvalidException invalid)
    {
      this();
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveAndProcessFP_result(receiveAndProcessFP_result other) {
      if (other.isSetInvalid()) {
        this.invalid = new RPC.InvalidException(other.invalid);
      }
    }

    @Override
    public receiveAndProcessFP_result deepCopy() {
      return new receiveAndProcessFP_result(this);
    }

    @Override
    public void clear() {
      this.invalid = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RPC.InvalidException getInvalid() {
      return this.invalid;
    }

    public receiveAndProcessFP_result setInvalid(@org.apache.thrift.annotation.Nullable RPC.InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((RPC.InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INVALID:
        return getInvalid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INVALID:
        return isSetInvalid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof receiveAndProcessFP_result)
        return this.equals((receiveAndProcessFP_result)that);
      return false;
    }

    public boolean equals(receiveAndProcessFP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(receiveAndProcessFP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("receiveAndProcessFP_result(");
      boolean first = true;

      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveAndProcessFP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_resultStandardScheme getScheme() {
        return new receiveAndProcessFP_resultStandardScheme();
      }
    }

    private static class receiveAndProcessFP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<receiveAndProcessFP_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new RPC.InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveAndProcessFP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_resultTupleScheme getScheme() {
        return new receiveAndProcessFP_resultTupleScheme();
      }
    }

    private static class receiveAndProcessFP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<receiveAndProcessFP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInvalid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invalid = new RPC.InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class provideNeighborsResult_args implements org.apache.thrift.TBase<provideNeighborsResult_args, provideNeighborsResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<provideNeighborsResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("provideNeighborsResult_args");

    private static final org.apache.thrift.protocol.TField UN_SATE_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("unSateUnits", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE_NODE_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeNodeHash", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new provideNeighborsResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new provideNeighborsResult_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> unSateUnits; // required
    public int edgeNodeHash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UN_SATE_UNITS((short)1, "unSateUnits"),
      EDGE_NODE_HASH((short)2, "edgeNodeHash");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UN_SATE_UNITS
            return UN_SATE_UNITS;
          case 2: // EDGE_NODE_HASH
            return EDGE_NODE_HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGENODEHASH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UN_SATE_UNITS, new org.apache.thrift.meta_data.FieldMetaData("unSateUnits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.EDGE_NODE_HASH, new org.apache.thrift.meta_data.FieldMetaData("edgeNodeHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(provideNeighborsResult_args.class, metaDataMap);
    }

    public provideNeighborsResult_args() {
    }

    public provideNeighborsResult_args(
      java.util.List<java.util.List<java.lang.Double>> unSateUnits,
      int edgeNodeHash)
    {
      this();
      this.unSateUnits = unSateUnits;
      this.edgeNodeHash = edgeNodeHash;
      setEdgeNodeHashIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public provideNeighborsResult_args(provideNeighborsResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUnSateUnits()) {
        java.util.List<java.util.List<java.lang.Double>> __this__unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.unSateUnits.size());
        for (java.util.List<java.lang.Double> other_element : other.unSateUnits) {
          java.util.List<java.lang.Double> __this__unSateUnits_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__unSateUnits.add(__this__unSateUnits_copy);
        }
        this.unSateUnits = __this__unSateUnits;
      }
      this.edgeNodeHash = other.edgeNodeHash;
    }

    @Override
    public provideNeighborsResult_args deepCopy() {
      return new provideNeighborsResult_args(this);
    }

    @Override
    public void clear() {
      this.unSateUnits = null;
      setEdgeNodeHashIsSet(false);
      this.edgeNodeHash = 0;
    }

    public int getUnSateUnitsSize() {
      return (this.unSateUnits == null) ? 0 : this.unSateUnits.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getUnSateUnitsIterator() {
      return (this.unSateUnits == null) ? null : this.unSateUnits.iterator();
    }

    public void addToUnSateUnits(java.util.List<java.lang.Double> elem) {
      if (this.unSateUnits == null) {
        this.unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.unSateUnits.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getUnSateUnits() {
      return this.unSateUnits;
    }

    public provideNeighborsResult_args setUnSateUnits(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> unSateUnits) {
      this.unSateUnits = unSateUnits;
      return this;
    }

    public void unsetUnSateUnits() {
      this.unSateUnits = null;
    }

    /** Returns true if field unSateUnits is set (has been assigned a value) and false otherwise */
    public boolean isSetUnSateUnits() {
      return this.unSateUnits != null;
    }

    public void setUnSateUnitsIsSet(boolean value) {
      if (!value) {
        this.unSateUnits = null;
      }
    }

    public int getEdgeNodeHash() {
      return this.edgeNodeHash;
    }

    public provideNeighborsResult_args setEdgeNodeHash(int edgeNodeHash) {
      this.edgeNodeHash = edgeNodeHash;
      setEdgeNodeHashIsSet(true);
      return this;
    }

    public void unsetEdgeNodeHash() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGENODEHASH_ISSET_ID);
    }

    /** Returns true if field edgeNodeHash is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeNodeHash() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGENODEHASH_ISSET_ID);
    }

    public void setEdgeNodeHashIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EDGENODEHASH_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UN_SATE_UNITS:
        if (value == null) {
          unsetUnSateUnits();
        } else {
          setUnSateUnits((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      case EDGE_NODE_HASH:
        if (value == null) {
          unsetEdgeNodeHash();
        } else {
          setEdgeNodeHash((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UN_SATE_UNITS:
        return getUnSateUnits();

      case EDGE_NODE_HASH:
        return getEdgeNodeHash();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UN_SATE_UNITS:
        return isSetUnSateUnits();
      case EDGE_NODE_HASH:
        return isSetEdgeNodeHash();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof provideNeighborsResult_args)
        return this.equals((provideNeighborsResult_args)that);
      return false;
    }

    public boolean equals(provideNeighborsResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unSateUnits = true && this.isSetUnSateUnits();
      boolean that_present_unSateUnits = true && that.isSetUnSateUnits();
      if (this_present_unSateUnits || that_present_unSateUnits) {
        if (!(this_present_unSateUnits && that_present_unSateUnits))
          return false;
        if (!this.unSateUnits.equals(that.unSateUnits))
          return false;
      }

      boolean this_present_edgeNodeHash = true;
      boolean that_present_edgeNodeHash = true;
      if (this_present_edgeNodeHash || that_present_edgeNodeHash) {
        if (!(this_present_edgeNodeHash && that_present_edgeNodeHash))
          return false;
        if (this.edgeNodeHash != that.edgeNodeHash)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnSateUnits()) ? 131071 : 524287);
      if (isSetUnSateUnits())
        hashCode = hashCode * 8191 + unSateUnits.hashCode();

      hashCode = hashCode * 8191 + edgeNodeHash;

      return hashCode;
    }

    @Override
    public int compareTo(provideNeighborsResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnSateUnits(), other.isSetUnSateUnits());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnSateUnits()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unSateUnits, other.unSateUnits);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEdgeNodeHash(), other.isSetEdgeNodeHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeNodeHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeNodeHash, other.edgeNodeHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("provideNeighborsResult_args(");
      boolean first = true;

      sb.append("unSateUnits:");
      if (this.unSateUnits == null) {
        sb.append("null");
      } else {
        sb.append(this.unSateUnits);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeNodeHash:");
      sb.append(this.edgeNodeHash);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class provideNeighborsResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_argsStandardScheme getScheme() {
        return new provideNeighborsResult_argsStandardScheme();
      }
    }

    private static class provideNeighborsResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<provideNeighborsResult_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UN_SATE_UNITS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list18.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    {
                      org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                      _elem19 = new java.util.ArrayList<java.lang.Double>(_list21.size);
                      double _elem22;
                      for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                      {
                        _elem22 = iprot.readDouble();
                        _elem19.add(_elem22);
                      }
                      iprot.readListEnd();
                    }
                    struct.unSateUnits.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setUnSateUnitsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE_NODE_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.edgeNodeHash = iprot.readI32();
                struct.setEdgeNodeHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unSateUnits != null) {
          oprot.writeFieldBegin(UN_SATE_UNITS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.unSateUnits.size()));
            for (java.util.List<java.lang.Double> _iter24 : struct.unSateUnits)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter24.size()));
                for (double _iter25 : _iter24)
                {
                  oprot.writeDouble(_iter25);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EDGE_NODE_HASH_FIELD_DESC);
        oprot.writeI32(struct.edgeNodeHash);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class provideNeighborsResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_argsTupleScheme getScheme() {
        return new provideNeighborsResult_argsTupleScheme();
      }
    }

    private static class provideNeighborsResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<provideNeighborsResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnSateUnits()) {
          optionals.set(0);
        }
        if (struct.isSetEdgeNodeHash()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUnSateUnits()) {
          {
            oprot.writeI32(struct.unSateUnits.size());
            for (java.util.List<java.lang.Double> _iter26 : struct.unSateUnits)
            {
              {
                oprot.writeI32(_iter26.size());
                for (double _iter27 : _iter26)
                {
                  oprot.writeDouble(_iter27);
                }
              }
            }
          }
        }
        if (struct.isSetEdgeNodeHash()) {
          oprot.writeI32(struct.edgeNodeHash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list28 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
            struct.unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list28.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem29;
            for (int _i30 = 0; _i30 < _list28.size; ++_i30)
            {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _elem29 = new java.util.ArrayList<java.lang.Double>(_list31.size);
                double _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readDouble();
                  _elem29.add(_elem32);
                }
              }
              struct.unSateUnits.add(_elem29);
            }
          }
          struct.setUnSateUnitsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.edgeNodeHash = iprot.readI32();
          struct.setEdgeNodeHashIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class provideNeighborsResult_result implements org.apache.thrift.TBase<provideNeighborsResult_result, provideNeighborsResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<provideNeighborsResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("provideNeighborsResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new provideNeighborsResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new provideNeighborsResult_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> success; // required
    public @org.apache.thrift.annotation.Nullable RPC.InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID((short)1, "invalid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC.UnitInNode.class)))));
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC.InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(provideNeighborsResult_result.class, metaDataMap);
    }

    public provideNeighborsResult_result() {
    }

    public provideNeighborsResult_result(
      java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> success,
      RPC.InvalidException invalid)
    {
      this();
      this.success = success;
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public provideNeighborsResult_result(provideNeighborsResult_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> __this__success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>(other.success.size());
        for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.util.List<RPC.UnitInNode>> other_element : other.success.entrySet()) {

          java.util.List<java.lang.Double> other_element_key = other_element.getKey();
          java.util.List<RPC.UnitInNode> other_element_value = other_element.getValue();

          java.util.List<java.lang.Double> __this__success_copy_key = new java.util.ArrayList<java.lang.Double>(other_element_key);

          java.util.List<RPC.UnitInNode> __this__success_copy_value = new java.util.ArrayList<RPC.UnitInNode>(other_element_value.size());
          for (RPC.UnitInNode other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new RPC.UnitInNode(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetInvalid()) {
        this.invalid = new RPC.InvalidException(other.invalid);
      }
    }

    @Override
    public provideNeighborsResult_result deepCopy() {
      return new provideNeighborsResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.invalid = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.util.List<java.lang.Double> key, java.util.List<RPC.UnitInNode> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> getSuccess() {
      return this.success;
    }

    public provideNeighborsResult_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public RPC.InvalidException getInvalid() {
      return this.invalid;
    }

    public provideNeighborsResult_result setInvalid(@org.apache.thrift.annotation.Nullable RPC.InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>)value);
        }
        break;

      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((RPC.InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INVALID:
        return getInvalid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID:
        return isSetInvalid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof provideNeighborsResult_result)
        return this.equals((provideNeighborsResult_result)that);
      return false;
    }

    public boolean equals(provideNeighborsResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(provideNeighborsResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("provideNeighborsResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class provideNeighborsResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_resultStandardScheme getScheme() {
        return new provideNeighborsResult_resultStandardScheme();
      }
    }

    private static class provideNeighborsResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<provideNeighborsResult_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>(2*_map34.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key35;
                  @org.apache.thrift.annotation.Nullable java.util.List<RPC.UnitInNode> _val36;
                  for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                  {
                    {
                      org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                      _key35 = new java.util.ArrayList<java.lang.Double>(_list38.size);
                      double _elem39;
                      for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                      {
                        _elem39 = iprot.readDouble();
                        _key35.add(_elem39);
                      }
                      iprot.readListEnd();
                    }
                    {
                      org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                      _val36 = new java.util.ArrayList<RPC.UnitInNode>(_list41.size);
                      @org.apache.thrift.annotation.Nullable RPC.UnitInNode _elem42;
                      for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                      {
                        _elem42 = new RPC.UnitInNode();
                        _elem42.read(iprot);
                        _val36.add(_elem42);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key35, _val36);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new RPC.InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.util.List<RPC.UnitInNode>> _iter44 : struct.success.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter44.getKey().size()));
                for (double _iter45 : _iter44.getKey())
                {
                  oprot.writeDouble(_iter45);
                }
                oprot.writeListEnd();
              }
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter44.getValue().size()));
                for (RPC.UnitInNode _iter46 : _iter44.getValue())
                {
                  _iter46.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class provideNeighborsResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_resultTupleScheme getScheme() {
        return new provideNeighborsResult_resultTupleScheme();
      }
    }

    private static class provideNeighborsResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<provideNeighborsResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.util.List<RPC.UnitInNode>> _iter47 : struct.success.entrySet())
            {
              {
                oprot.writeI32(_iter47.getKey().size());
                for (double _iter48 : _iter47.getKey())
                {
                  oprot.writeDouble(_iter48);
                }
              }
              {
                oprot.writeI32(_iter47.getValue().size());
                for (RPC.UnitInNode _iter49 : _iter47.getValue())
                {
                  _iter49.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.LIST); 
            struct.success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<RPC.UnitInNode>>(2*_map50.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key51;
            @org.apache.thrift.annotation.Nullable java.util.List<RPC.UnitInNode> _val52;
            for (int _i53 = 0; _i53 < _map50.size; ++_i53)
            {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
                _key51 = new java.util.ArrayList<java.lang.Double>(_list54.size);
                double _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readDouble();
                  _key51.add(_elem55);
                }
              }
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                _val52 = new java.util.ArrayList<RPC.UnitInNode>(_list57.size);
                @org.apache.thrift.annotation.Nullable RPC.UnitInNode _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = new RPC.UnitInNode();
                  _elem58.read(iprot);
                  _val52.add(_elem58);
                }
              }
              struct.success.put(_key51, _val52);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalid = new RPC.InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class uploadAndDetectOutlier_args implements org.apache.thrift.TBase<uploadAndDetectOutlier_args, uploadAndDetectOutlier_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadAndDetectOutlier_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadAndDetectOutlier_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadAndDetectOutlier_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadAndDetectOutlier_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<RPC.Vector> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC.Vector.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadAndDetectOutlier_args.class, metaDataMap);
    }

    public uploadAndDetectOutlier_args() {
    }

    public uploadAndDetectOutlier_args(
      java.util.List<RPC.Vector> data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadAndDetectOutlier_args(uploadAndDetectOutlier_args other) {
      if (other.isSetData()) {
        java.util.List<RPC.Vector> __this__data = new java.util.ArrayList<RPC.Vector>(other.data.size());
        for (RPC.Vector other_element : other.data) {
          __this__data.add(new RPC.Vector(other_element));
        }
        this.data = __this__data;
      }
    }

    @Override
    public uploadAndDetectOutlier_args deepCopy() {
      return new uploadAndDetectOutlier_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<RPC.Vector> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(RPC.Vector elem) {
      if (this.data == null) {
        this.data = new java.util.ArrayList<RPC.Vector>();
      }
      this.data.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<RPC.Vector> getData() {
      return this.data;
    }

    public uploadAndDetectOutlier_args setData(@org.apache.thrift.annotation.Nullable java.util.List<RPC.Vector> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.util.List<RPC.Vector>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof uploadAndDetectOutlier_args)
        return this.equals((uploadAndDetectOutlier_args)that);
      return false;
    }

    public boolean equals(uploadAndDetectOutlier_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadAndDetectOutlier_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadAndDetectOutlier_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadAndDetectOutlier_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadAndDetectOutlier_argsStandardScheme getScheme() {
        return new uploadAndDetectOutlier_argsStandardScheme();
      }
    }

    private static class uploadAndDetectOutlier_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadAndDetectOutlier_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadAndDetectOutlier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.data = new java.util.ArrayList<RPC.Vector>(_list60.size);
                  @org.apache.thrift.annotation.Nullable RPC.Vector _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    _elem61 = new RPC.Vector();
                    _elem61.read(iprot);
                    struct.data.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadAndDetectOutlier_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (RPC.Vector _iter63 : struct.data)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadAndDetectOutlier_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadAndDetectOutlier_argsTupleScheme getScheme() {
        return new uploadAndDetectOutlier_argsTupleScheme();
      }
    }

    private static class uploadAndDetectOutlier_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadAndDetectOutlier_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadAndDetectOutlier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (RPC.Vector _iter64 : struct.data)
            {
              _iter64.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadAndDetectOutlier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list65 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.data = new java.util.ArrayList<RPC.Vector>(_list65.size);
            @org.apache.thrift.annotation.Nullable RPC.Vector _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = new RPC.Vector();
              _elem66.read(iprot);
              struct.data.add(_elem66);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class uploadAndDetectOutlier_result implements org.apache.thrift.TBase<uploadAndDetectOutlier_result, uploadAndDetectOutlier_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadAndDetectOutlier_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadAndDetectOutlier_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadAndDetectOutlier_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadAndDetectOutlier_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Set<RPC.Vector> success; // required
    public @org.apache.thrift.annotation.Nullable RPC.InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID((short)1, "invalid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC.Vector.class))));
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC.InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadAndDetectOutlier_result.class, metaDataMap);
    }

    public uploadAndDetectOutlier_result() {
    }

    public uploadAndDetectOutlier_result(
      java.util.Set<RPC.Vector> success,
      RPC.InvalidException invalid)
    {
      this();
      this.success = success;
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadAndDetectOutlier_result(uploadAndDetectOutlier_result other) {
      if (other.isSetSuccess()) {
        java.util.Set<RPC.Vector> __this__success = new java.util.HashSet<RPC.Vector>(other.success.size());
        for (RPC.Vector other_element : other.success) {
          __this__success.add(new RPC.Vector(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInvalid()) {
        this.invalid = new RPC.InvalidException(other.invalid);
      }
    }

    @Override
    public uploadAndDetectOutlier_result deepCopy() {
      return new uploadAndDetectOutlier_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.invalid = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<RPC.Vector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RPC.Vector elem) {
      if (this.success == null) {
        this.success = new java.util.HashSet<RPC.Vector>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<RPC.Vector> getSuccess() {
      return this.success;
    }

    public uploadAndDetectOutlier_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Set<RPC.Vector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public RPC.InvalidException getInvalid() {
      return this.invalid;
    }

    public uploadAndDetectOutlier_result setInvalid(@org.apache.thrift.annotation.Nullable RPC.InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Set<RPC.Vector>)value);
        }
        break;

      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((RPC.InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INVALID:
        return getInvalid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID:
        return isSetInvalid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof uploadAndDetectOutlier_result)
        return this.equals((uploadAndDetectOutlier_result)that);
      return false;
    }

    public boolean equals(uploadAndDetectOutlier_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadAndDetectOutlier_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadAndDetectOutlier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadAndDetectOutlier_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadAndDetectOutlier_resultStandardScheme getScheme() {
        return new uploadAndDetectOutlier_resultStandardScheme();
      }
    }

    private static class uploadAndDetectOutlier_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadAndDetectOutlier_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadAndDetectOutlier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set68 = iprot.readSetBegin();
                  struct.success = new java.util.HashSet<RPC.Vector>(2*_set68.size);
                  @org.apache.thrift.annotation.Nullable RPC.Vector _elem69;
                  for (int _i70 = 0; _i70 < _set68.size; ++_i70)
                  {
                    _elem69 = new RPC.Vector();
                    _elem69.read(iprot);
                    struct.success.add(_elem69);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new RPC.InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadAndDetectOutlier_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RPC.Vector _iter71 : struct.success)
            {
              _iter71.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadAndDetectOutlier_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public uploadAndDetectOutlier_resultTupleScheme getScheme() {
        return new uploadAndDetectOutlier_resultTupleScheme();
      }
    }

    private static class uploadAndDetectOutlier_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadAndDetectOutlier_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadAndDetectOutlier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RPC.Vector _iter72 : struct.success)
            {
              _iter72.write(oprot);
            }
          }
        }
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadAndDetectOutlier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set73 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.HashSet<RPC.Vector>(2*_set73.size);
            @org.apache.thrift.annotation.Nullable RPC.Vector _elem74;
            for (int _i75 = 0; _i75 < _set73.size; ++_i75)
            {
              _elem74 = new RPC.Vector();
              _elem74.read(iprot);
              struct.success.add(_elem74);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalid = new RPC.InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
